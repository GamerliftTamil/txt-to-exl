from customtkinter import *
from PIL import Image
import os
import webbrowser
import pyrebase
import pandas as pd
import re
import tkinter as tk
from tkinter import filedialog, messagebox
from openpyxl import load_workbook
from openpyxl.styles import Font, Alignment

# Firebase Configuration
firebaseConfig = {
    "apiKey": "AIzaSyBMsoUjqhAHGnu6cHm5ox1gMNDo8dzRHSM",
    "authDomain": "user-data-base-bf2fb.firebaseapp.com",
    "projectId": "user-data-base-bf2fb",
    "storageBucket": "user-data-base-bf2fb.appspot.com",
    "messagingSenderId": "516620319089",
    "appId": "1:516620319089:web:91921a1ebd56743e2cded0",
    "measurementId": "G-YK0FTXSMKY",
    "databaseURL": "https://user-data-base-bf2fb.firebaseio.com"
}

firebase = pyrebase.initialize_app(firebaseConfig)
auth = firebase.auth()

FG_COLOR = "black"
HOVER_COLOR = "navy"
BG_COLOR = "black"

def validate_email(email):
    """Simple email validation"""
    return re.match(r"[^@]+@[^@]+\.[^@]+", email)

def error_popup(title, message):
    error_window = CTk()
    error_window.geometry("300x150")
    error_window.title(title)
    error_window.resizable(False, False)
    
    CTkLabel(error_window, text=message, text_color="red", wraplength=250).pack(pady=20)
    CTkButton(error_window, text="OK", command=error_window.destroy).pack(pady=10)
    
    # Make sure to handle window closing properly
    error_window.protocol("WM_DELETE_WINDOW", error_window.destroy)
    error_window.mainloop()

def verify_login():
    email = email_entry.get().strip()
    password = password_entry.get().strip()

    if not email or not password:
        error_popup("Login Error", "Please enter both email and password!")
        return
    
    if not validate_email(email):
        error_popup("Login Error", "Please enter a valid email address!")
        return
    
    try:
        user = auth.sign_in_with_email_and_password(email, password)
        print("Login Successful:", user)
        if login_window.winfo_exists():
            login_window.destroy()
        open_dashboard()
    except Exception as e:
        error_msg = str(e)
        print("Firebase Error:", error_msg)
        
        if "INVALID_EMAIL" in error_msg:
            error_popup("Login Error", "Invalid email format!")
        elif "INVALID_PASSWORD" in error_msg or "MISSING_PASSWORD" in error_msg:
            error_popup("Login Error", "Invalid password!")
        else:
            error_popup("Login Error", "Login failed. Please try again.")

def open_subject_code():
    url = "https://www.cbse.gov.in/newsite/attach/SUB1017.pdf"
    try:
        webbrowser.open(url)
    except Exception as e:
        error_popup("Error", f"Could not open the PDF file: {str(e)}")


def process():
    try:
        file_path = filedialog.askopenfilename(title="Select CBSE Results TXT File", 
                                              filetypes=[("Text Files", "*.txt")])
        if not file_path:
            return  
        
        save_path = filedialog.asksaveasfilename(title="Save Processed Results As",  defaultextension=".xlsx",  filetypes=[("Excel Files", "*.xlsx")])
        if not save_path:
            return  

        with open(file_path, 'r', encoding='utf-8') as file:
            content = file.read()

        # Extract school info from header
        header_match = re.search(r'(date\s+[\d/-]+\s+c\.b\.s\.e.*?School:[^\n]+)', content, re.DOTALL)
        school_info = header_match.group(1).replace('\n', ' ') if header_match else "CBSE Results"

        students = []
        records = re.finditer(r'(\d{8})\s+([MF])\s+([^\n]+?)\s+((?:\d{3}\s+)+)(pass|fail)[\s\S]*?((?:\d{3}\s+[a-z]\d\s*)+)', content, re.DOTALL)
        
        for record in records:
            roll_no, gender, name, marks_str, result, grades_str = record.groups()
            
            # Extract marks (these are actually the subject codes that need to be swapped)
            wrong_marks = marks_str.strip().split()
            
            # Extract grades (these contain both subject codes and grades)
            grade_pairs = re.findall(r'(\d{3})\s+([a-z]\d)', grades_str)
            
            student_data = {
                'Roll No': roll_no, 
                'Name': name, 
                'Gender': gender, 
                'Result': result
            }
            
            # The "marks" we extracted earlier are actually subject codes
            # The real marks are in the grade_pairs
            # So we need to swap them
            for i, (code, grade) in enumerate(grade_pairs):
                if i < len(wrong_marks):
                    # The actual mark is the code from grade_pairs
                    # The actual subject code is in wrong_marks
                    student_data[f'Sub {wrong_marks[i]} Marks'] = code
                    student_data[f'Sub {wrong_marks[i]} Grade'] = grade
            
            students.append(student_data)
        
        if not students:
            raise ValueError("No valid student records found!")

        df = pd.DataFrame(students)
        
        # Reorder columns logically
        base_columns = ['Roll No', 'Name', 'Gender']
        subject_columns = []
        
        # Collect all subject columns
        for col in df.columns:
            if col.startswith('Sub') and 'Marks' in col:
                sub_code = col.split()[1]
                subject_columns.extend([
                    f'Sub {sub_code} Marks',
                    f'Sub {sub_code} Grade'
                ])
        
        # Final column order
        columns_order = base_columns + subject_columns + ['Result']
        df = df[columns_order]

        # Create Excel file
        writer = pd.ExcelWriter(save_path, engine='openpyxl')
        df.to_excel(writer, index=False, startrow=2, header=False)
        
        workbook = writer.book
        worksheet = writer.sheets['Sheet1']
        
        # Add header information
        worksheet.cell(row=1, column=1, value=school_info)
        
        # Write column headers
        for col_num, value in enumerate(df.columns.values, 1):
            worksheet.cell(row=2, column=col_num, value=value)
        
        writer.close()
        
        messagebox.showinfo("Success", f"Results saved as {os.path.basename(save_path)}")
    
    except Exception as e:
        messagebox.showerror("Error", f"An error occurred: {str(e)}")
def open_login_window():
    global email_entry, password_entry, login_window
    
    if 'app' in globals() and app.winfo_exists():
        app.destroy()
    
    login_window = CTk()
    login_window.geometry("500x550")
    login_window.title("Login")
    login_window.resizable(False, False)
    set_appearance_mode("light")
    login_window.configure(bg=BG_COLOR)
    
    # Handle window closing properly
    login_window.protocol("WM_DELETE_WINDOW", login_window.destroy)

    CTkLabel(login_window, text="Login", font=("Helvetica", 20)).pack(pady=20)

    email_entry = CTkEntry(login_window, placeholder_text="Enter Email", width=300)
    email_entry.pack(pady=20)
    
    password_entry = CTkEntry(login_window, placeholder_text="Enter Password", width=300, show="*")
    password_entry.pack(pady=20)

    CTkButton(login_window, text="Login", fg_color=FG_COLOR, hover_color=HOVER_COLOR, 
              command=verify_login).pack(pady=20)
    CTkButton(login_window, text="Subject Code PDF", fg_color=FG_COLOR, hover_color=HOVER_COLOR, 
              command=open_subject_code).pack(pady=20)
    
    login_window.mainloop()

def open_dashboard():
    dashboard = CTk()
    dashboard.geometry("600x400")
    dashboard.title("Dashboard")
    dashboard.resizable(False, False)
    set_appearance_mode("light")
    dashboard.configure(bg=BG_COLOR)
    
    # Handle window closing properly
    dashboard.protocol("WM_DELETE_WINDOW", dashboard.destroy)

    CTkLabel(dashboard, text="Welcome to CBSE Results Converter", font=("Helvetica", 20)).pack(pady=30)
    
    CTkButton(dashboard, text="Convert TXT to Excel", fg_color=FG_COLOR, hover_color=HOVER_COLOR, 
              command=process, width=200, height=40).pack(pady=20)
    
    dashboard.mainloop()

def register():
    email = username_entry.get().strip()
    password = password_entry.get().strip()

    if not email or not password:
        error_popup("Registration Error", "Please enter both email and password!")
        return
    
    if not validate_email(email):
        error_popup("Registration Error", "Please enter a valid email address!")
        return
    
    try:
        user = auth.create_user_with_email_and_password(email, password)
        print("User Created Successfully:", user)
        messagebox.showinfo("Success", "Account created successfully! Please log in.")
        if app.winfo_exists():
            app.destroy()
        open_login_window()
    except Exception as e:
        error_message = str(e)
        print("Firebase Error:", error_message)
        
        if "EMAIL_EXISTS" in error_message:
            error_popup("Registration Error", "Email is already registered!")
        elif "INVALID_EMAIL" in error_message:
            error_popup("Registration Error", "Invalid email format!")
        elif "WEAK_PASSWORD" in error_message:
            error_popup("Registration Error", "Password must be at least 6 characters!")
        else:
            error_popup("Registration Error", "Something went wrong. Try again later.")

# Main application
app = CTk()
app.geometry("500x500")
app.title("Register")
app.resizable(False, False)
set_appearance_mode("light")
app.configure(bg=BG_COLOR)
app.protocol("WM_DELETE_WINDOW", app.destroy)  # Handle window closing

CTkLabel(app, text="Create an Account", font=("Helvetica", 20)).pack(padx=50, pady=30)

username_entry = CTkEntry(app, placeholder_text="Enter Email", width=300)
username_entry.pack(pady=20)

password_entry = CTkEntry(app, placeholder_text="Enter Password", width=300, show="*")
password_entry.pack(pady=20)

CTkButton(app, text="Register", hover_color=HOVER_COLOR, fg_color=FG_COLOR, 
          command=register, width=150).pack(pady=20)
CTkButton(app, text="Already Registered?", hover_color=HOVER_COLOR, fg_color=FG_COLOR, 
          command=open_login_window, width=150).pack(pady=10)

app.mainloop()
